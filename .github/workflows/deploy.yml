name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: "Deploy to VPS"
    runs-on: ubuntu-latest
    outputs:
      error_log: ${{ steps.deploy_site.outputs.error_log }}
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy-key.pem
          chmod 600 ~/.ssh/deploy-key.pem
          cat >> ~/.ssh/config <<END
          Host my-vps
            HostName $SSH_IP
            User $SSH_USER
            IdentityFile ~/.ssh/deploy-key.pem
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_IP: ${{ secrets.SSH_IP }}

      - name: Deploy Site
        id: deploy_site
        run: |
          set -o pipefail
          ssh my-vps '~/redeploySite.sh' 2> error.log || true
          echo "error_log<<EOF" >> $GITHUB_OUTPUT
          cat error.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Capture Container Status
        id: container_status
        run: |
          status_output=$(ssh my-vps 'cd ${{ secrets.PROJECT_ROOT }} && docker ps')
          echo "status<<EOF" >> $GITHUB_OUTPUT
          echo "$status_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Notify Discord - Success
        if: success()
        run: |
          echo '{
            "content": "ðŸš€ **Deployment Successful**",
            "embeds": [ {
              "title": "New Deployment to VPS",
              "fields": [
                { "name": "Author", "value": "${{ github.actor }}", "inline": true },
                { "name": "Time", "value": "${{ github.event.head_commit.timestamp }}", "inline": true },
                { "name": "Commit", "value": "${{ github.event.head_commit.message }}" },
                { "name": "Container Status", "value": "```${{ steps.container_status.outputs.status }}```" }
              ]
            }]
          }' > payload.json
          curl -s -X POST -H "Content-Type: application/json" -d @payload.json "${{ secrets.DISCORD_WEBHOOK }}"

  notify-failure:
    name: "Notify Discord - Failure"
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    steps:
      - name: Notify Discord with error
        run: |
          echo '{
            "content": "ðŸš¨ **Deployment Failed**",
            "embeds": [ {
              "title": "Error Report",
              "fields": [
                { "name": "Author", "value": "${{ github.actor }}", "inline": true },
                { "name": "Time", "value": "${{ github.event.head_commit.timestamp }}", "inline": true },
                { "name": "Commit", "value": "${{ github.event.head_commit.message }}" },
                { "name": "Error Log", "value": "```${{ needs.deploy.outputs.error_log }}```" }
              ]
            }]
          }' > fail_payload.json
          curl -s -X POST -H "Content-Type: application/json" -d @fail_payload.json "${{ secrets.DISCORD_WEBHOOK }}"
